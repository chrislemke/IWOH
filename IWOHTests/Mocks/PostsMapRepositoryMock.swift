///
/// @Generated by Mockolo
///

import Combine
import IWOHInteractionKit
@testable import IWOH

final class PostsMapRepositoryMock: PostsMapRepositoryTyp {
    init() { }
    init(locationAuthenticationStatus: AnyPublisher<LocationAuthenticationStatus, Never>, currentLocation: AnyPublisher<LocationManager.State, Never>, locationHeading: AnyPublisher<LocationHeading?, Never>, posts: AnyPublisher<[Post], Never>, location: LocationManager.State) {
        self._locationAuthenticationStatus = locationAuthenticationStatus
        self._currentLocation = currentLocation
        self._locationHeading = locationHeading
        self._posts = posts
        self._location = location
    }

    var locationAuthenticationStatusSetCallCount = 0
    private var _locationAuthenticationStatus: AnyPublisher<LocationAuthenticationStatus, Never>!  { didSet { locationAuthenticationStatusSetCallCount += 1 } }
    var locationAuthenticationStatus: AnyPublisher<LocationAuthenticationStatus, Never> {
        get { return _locationAuthenticationStatus }
        set { _locationAuthenticationStatus = newValue }
    }

    var currentLocationSetCallCount = 0
    private var _currentLocation: AnyPublisher<LocationManager.State, Never>!  { didSet { currentLocationSetCallCount += 1 } }
    var currentLocation: AnyPublisher<LocationManager.State, Never> {
        get { return _currentLocation }
        set { _currentLocation = newValue }
    }

    var locationHeadingSetCallCount = 0
    private var _locationHeading: AnyPublisher<LocationHeading?, Never>!  { didSet { locationHeadingSetCallCount += 1 } }
    var locationHeading: AnyPublisher<LocationHeading?, Never> {
        get { return _locationHeading }
        set { _locationHeading = newValue }
    }

    var postsSetCallCount = 0
    private var _posts: AnyPublisher<[Post], Never>!  { didSet { postsSetCallCount += 1 } }
    var posts: AnyPublisher<[Post], Never> {
        get { return _posts }
        set { _posts = newValue }
    }

    var locationSetCallCount = 0
    private var _location: LocationManager.State!  { didSet { locationSetCallCount += 1 } }
    var location: LocationManager.State {
        get { return _location }
        set { _location = newValue }
    }

    var distanceCallCount = 0
    var distanceHandler: ((Location) -> (Double?))?
    func distance(from location: Location) -> Double? {
        distanceCallCount += 1
        if let distanceHandler = distanceHandler {
            return distanceHandler(location)
        }
        return nil
    }

    var startUpdatingLocationCallCount = 0
    var startUpdatingLocationHandler: (() -> ())?
    func startUpdatingLocation()  {
        startUpdatingLocationCallCount += 1
        if let startUpdatingLocationHandler = startUpdatingLocationHandler {
            startUpdatingLocationHandler()
        }
    }

    var stopUpdatingLocationCallCount = 0
    var stopUpdatingLocationHandler: (() -> ())?
    func stopUpdatingLocation()  {
        stopUpdatingLocationCallCount += 1
        if let stopUpdatingLocationHandler = stopUpdatingLocationHandler {
            stopUpdatingLocationHandler()
        }
    }
}


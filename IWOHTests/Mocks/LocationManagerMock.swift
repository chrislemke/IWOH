///
/// @Generated by Mockolo
///

import Combine
@testable import IWOH
import IWOHInteractionKit

final class LocationManagerMock: LocationManagerTyp {
    init() { }
    init(authenticationStatus: AnyPublisher<LocationAuthenticationStatus, Never>, locationHeading: AnyPublisher<LocationHeading?, Never>, currentLocation: AnyPublisher<LocationManager.State, Never>, location: LocationManager.State) {
        self._authenticationStatus = authenticationStatus
        self._locationHeading = locationHeading
        self._currentLocation = currentLocation
        self._location = location
    }

    var authenticationStatusSetCallCount = 0
    private var _authenticationStatus: AnyPublisher<LocationAuthenticationStatus, Never>!  { didSet { authenticationStatusSetCallCount += 1 } }
    var authenticationStatus: AnyPublisher<LocationAuthenticationStatus, Never> {
        get { return _authenticationStatus }
        set { _authenticationStatus = newValue }
    }

    var locationHeadingSetCallCount = 0
    private var _locationHeading: AnyPublisher<LocationHeading?, Never>!  { didSet { locationHeadingSetCallCount += 1 } }
    var locationHeading: AnyPublisher<LocationHeading?, Never> {
        get { return _locationHeading }
        set { _locationHeading = newValue }
    }

    var currentLocationSetCallCount = 0
    private var _currentLocation: AnyPublisher<LocationManager.State, Never>!  { didSet { currentLocationSetCallCount += 1 } }
    var currentLocation: AnyPublisher<LocationManager.State, Never> {
        get { return _currentLocation }
        set { _currentLocation = newValue }
    }

    var locationSetCallCount = 0
    private var _location: LocationManager.State!  { didSet { locationSetCallCount += 1 } }
    var location: LocationManager.State {
        get { return _location }
        set { _location = newValue }
    }

    var requestWhenInUseAuthorizationCallCount = 0
    var requestWhenInUseAuthorizationHandler: (() -> ())?
    func requestWhenInUseAuthorization()  {
        requestWhenInUseAuthorizationCallCount += 1
        if let requestWhenInUseAuthorizationHandler = requestWhenInUseAuthorizationHandler {
            requestWhenInUseAuthorizationHandler()
        }
    }

    var requestLocationCallCount = 0
    var requestLocationHandler: (() -> ())?
    func requestLocation()  {
        requestLocationCallCount += 1
        if let requestLocationHandler = requestLocationHandler {
            requestLocationHandler()
        }
    }

    var setAccuracyCallCount = 0
    var setAccuracyHandler: ((LocationManager.Accuracy) -> ())?
    func setAccuracy(_ accuracy: LocationManager.Accuracy)  {
        setAccuracyCallCount += 1
        if let setAccuracyHandler = setAccuracyHandler {
            setAccuracyHandler(accuracy)
        }
    }

    var distanceCallCount = 0
    var distanceHandler: ((Location) -> (Double?))?
    func distance(from currentLocation: Location) -> Double? {
        distanceCallCount += 1
        if let distanceHandler = distanceHandler {
            return distanceHandler(currentLocation)
        }
        return nil
    }
}


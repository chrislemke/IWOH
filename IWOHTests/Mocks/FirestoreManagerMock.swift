///
/// @Generated by Mockolo
///

import Combine
import CombineTestExtensions
import IWOHInteractionKit
@testable import IWOH


final class FirestoreManagerMock: FirestoreManagerTyp {

	init(scheduler: TestScheduler) {
		self.documentPathHandler = { _, _ in
			"path"
		}
		self.updateDataHandler = { _, _, _ in
			TestPublisher<Bool, Never>(scheduler, [(100, .value(true))]).eraseToAnyPublisher()
		}
		self.addReferenceToSubcollectionHandler = { _, _, _, _, _ in
			TestPublisher<Bool, Never>(scheduler, [(100, .value(true))]).eraseToAnyPublisher()
		}
		self.addHandler = { _ in
			TestPublisher<SubmissionState, Never>(scheduler, [(100, .value(SubmissionState.success("id")))]).eraseToAnyPublisher()
		}
		self.isDocumentExistingInSubcollectionHandler = { _, _, _, _ in
			TestPublisher<Bool, Never>(scheduler, [(100, .value(true))]).eraseToAnyPublisher()
		}
		self.getHandler = { _, _ in
			TestPublisher<FirestorePost, Never>(scheduler, [(100, .value(TestValues.firestorePost))]).eraseToAnyPublisher()
		}
		self.listenHandler = { _, _ in
			TestPublisher<[FirestorePost], Never>(scheduler, [(100, .value([TestValues.firestorePost]))]).eraseToAnyPublisher()
		}
	}

	var documentPathCallCount = 0
	var documentPathHandler: ((Any, String) -> (String))?
	func documentPath<MODEL: Storeable>(_ type: MODEL.Type, id: String) -> String {
		documentPathCallCount += 1
		if let documentPathHandler = documentPathHandler {
			return documentPathHandler(type, id)
		}
		return ""
	}

	var updateDataCallCount = 0
	var updateDataHandler: ((Any, String, Any) -> (AnyPublisher<Bool, Never>))?
	func updateData<MODEL: Storeable>(_ type: MODEL.Type, id: String, data: [MODEL.CollectionFields: Any]) -> AnyPublisher<Bool, Never> {
		updateDataCallCount += 1
		if let updateDataHandler = updateDataHandler {
			return updateDataHandler(type, id, data)
		}
		fatalError("updateDataHandler returns can't have a default value thus its handler must be set")
	}

	var addReferenceToSubcollectionCallCount = 0
	var addReferenceToSubcollectionHandler: ((Any, String, String, String, Any) -> (AnyPublisher<Bool, Never>))?
	func addReferenceToSubcollection<MODEL: Subcollectable>(sourceType: MODEL.Type, id: String, referencedID: String, referencedDocumentPath: String, subcollectionPath: MODEL.SubcollectionPath) -> AnyPublisher<Bool, Never> {
		addReferenceToSubcollectionCallCount += 1
		if let addReferenceToSubcollectionHandler = addReferenceToSubcollectionHandler {
			return addReferenceToSubcollectionHandler(sourceType, id, referencedID, referencedDocumentPath, subcollectionPath)
		}
		fatalError("addReferenceToSubcollectionHandler returns can't have a default value thus its handler must be set")
	}

	var addCallCount = 0
	var addHandler: ((Any) -> (AnyPublisher<SubmissionState, Never>))?
	func add<MODEL: Storeable>(_ object: MODEL) -> AnyPublisher<SubmissionState, Never> {
		addCallCount += 1
		if let addHandler = addHandler {
			return addHandler(object)
		}
		fatalError("addHandler returns can't have a default value thus its handler must be set")
	}

	var isDocumentExistingInSubcollectionCallCount = 0
	var isDocumentExistingInSubcollectionHandler: ((Any, String, String, Any) -> (AnyPublisher<Bool, Never>))?
	func isDocumentExistingInSubcollection<MODEL: Subcollectable>(_ type: MODEL.Type, id: String, documentID: String, subcollectionPath: MODEL.SubcollectionPath) -> AnyPublisher<Bool, Never> {
		isDocumentExistingInSubcollectionCallCount += 1
		if let isDocumentExistingInSubcollectionHandler = isDocumentExistingInSubcollectionHandler {
			return isDocumentExistingInSubcollectionHandler(type, id, documentID, subcollectionPath)
		}
		fatalError("isDocumentExistingInSubcollectionHandler returns can't have a default value thus its handler must be set")
	}

	var getCallCount = 0
	var getHandler: ((Any, String) -> (Any))?
	func get<MODEL: Storeable>(_ type: MODEL.Type, id: String) -> AnyPublisher<MODEL, Never> {
		getCallCount += 1
		if let getHandler = getHandler {
			return getHandler(type, id) as! AnyPublisher<MODEL, Never>
		}
		fatalError("getHandler returns can't have a default value thus its handler must be set")
	}

	var listenCallCount = 0
	var listenHandler: ((Any, Any) -> (Any))?
	func listen<MODEL: Storeable>(_ type: MODEL.Type, order: Order<MODEL>) -> AnyPublisher<[MODEL], Never> {
		listenCallCount += 1
		if let listenHandler = listenHandler {
			return listenHandler(type, order) as! AnyPublisher<[MODEL], Never>
		}
		fatalError("listenHandler returns can't have a default value thus its handler must be set")
	}
}
